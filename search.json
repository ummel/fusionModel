[{"path":"https://ummel.github.io/fusionModel/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kevin Ummel. Author, maintainer. Karthik Akkiraju. Contributor. Miguel Poblete Cazenave. Contributor.","code":""},{"path":"https://ummel.github.io/fusionModel/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ummel K (2023). fusionModel: Data fusion analysis synthetic data R. R package version 2.2.4, https://ummel.github.io/fusionModel/.","code":"@Manual{,   title = {fusionModel: Data fusion and analysis of synthetic data in R},   author = {Kevin Ummel},   year = {2023},   note = {R package version 2.2.4},   url = {https://ummel.github.io/fusionModel/}, }"},{"path":"https://ummel.github.io/fusionModel/index.html","id":"fusionmodel","dir":"","previous_headings":"","what":"Data fusion and analysis of synthetic data in R","title":"Data fusion and analysis of synthetic data in R","text":"Kevin Ummel (ummel@berkeley.edu) Overview Motivation Methodology Installation Simple fusion Advanced fusion Analyzing fused data Validating fusion models","code":""},{"path":"https://ummel.github.io/fusionModel/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Data fusion and analysis of synthetic data in R","text":"fusionModel enables variables unique “donor” dataset statistically simulated (.e. fused ) “recipient” dataset. Variables common donor recipient used model simulate fused variables. package provides simple efficient interface general data fusion R, leveraging state---art machine learning algorithms Microsoft’s LightGBM framework. also provides tools analyzing synthetic/simulated data, calculating uncertainty, validating fusion output. fusionModel developed allow statistical integration microdata disparate social surveys. data fusion workhorse underpinning larger fusionACS data platform development Socio-Spatial Climate Collaborative. context, fusionModel used fuse variables range social surveys onto microdata American Community Survey, allowing analysis spatial resolution otherwise impossible.","code":""},{"path":"https://ummel.github.io/fusionModel/index.html","id":"motivation","dir":"","previous_headings":"","what":"Motivation","title":"Data fusion and analysis of synthetic data in R","text":"desire “fuse” otherwise integrate independent datasets long history, dating least early 1970’s (Ruggles Ruggles 1974; Alter 1974). Social scientists long recognized large amounts unconnected data “” – usually concerning characteristics households individuals (.e. microdata) – , ideally, like integrate analyze whole. aim falls general heading “Statistical Data Integration” (SDI) (Lewaa et al. 2021). prominent examples data fusion involved administrative record linkage. consists exact matching probabilistic linking independent datasets, using observable information like social security numbers, names, birth dates individuals. Record linkage gold standard can yield incredibly important insights high levels statistical confidence, evidenced pioneering work Raj Chetty colleagues. However, record linkage rarely feasible kinds microdata researchers use day--day (nevermind difficulty accessing administrative data). explosion online tracking social network data undoubtedly offer new lines analysis, time , least, social survey microdata remain indispensable. challenge promise recognized 50 years ago Nancy Richard Ruggles remains true today: Unfortunately, single microdata set contains different kinds information required problems economist wishes analyze. Different microdata sets contain different kinds information…great deal information collected sample basis. two samples involved probability individual appearing may small, exact matching impossible. methods combining types information contained two different samples one microdata set required. (Ruggles Ruggles 1974; 353-354) Practitioners regularly impute otherwise predict variable two one dataset another. Piecemeal, ad hoc data fusion common necessity quantitative research. Proper data fusion, hand, seeks systematically combine “two different samples one microdata set”. size nature samples involved intended analyses strongly influence choice data integration technique structure output. led relevant literature diverse convoluted, practitioners take different data “setups” objectives. context fusionACS, interested following problem: microdata two independent surveys, B, sample underlying population time period (e.g. occupied U.S. households nationwide 2018). specify “recipient” dataset B “donor”. goal generate new dataset, C, original survey responses plus realistic representation respondent might answered questionnaire survey B. , identify set common/shared variables X surveys solicit. attempt fuse set variables unique B – call Z, “fusion variables” – onto original microdata , conditional X.","code":""},{"path":"https://ummel.github.io/fusionModel/index.html","id":"methodology","dir":"","previous_headings":"","what":"Methodology","title":"Data fusion and analysis of synthetic data in R","text":"fusion strategy implemented fusionModel package borrows expands upon ideas statistical matching (D’Orazio et al. 2006), imputation (Little Rubin 2019), data synthesis (Drechsler 2011) literatures create flexible data fusion tool. employs variable-k, conditional expectation matching leverages high-performance gradient boosting algorithms. package accommodates fusion many variables, individually blocks, efficient computation recipient large relative donor. Specifically, goal create data fusion tool meets following requirements: Accommodate donor recipient datasets divergent sample sizes Handle continuous, categorical, semi-continuous (zero-inflated) variable types Ensure realistic values fused variables Scale efficiently larger datasets Fuse variables “one--one” “blocks” Employ data modeling approach : Makes distributional assumptions (.e. non-parametric) Automatically detects non-linear interaction effects Automatically selects predictor variables potentially large set Ability prevent overfitting (e.g. cross-validation) Complete methodological details available fusionACS Guidebook (INSERT LINK).","code":""},{"path":"https://ummel.github.io/fusionModel/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Data fusion and analysis of synthetic data in R","text":"","code":"devtools::install_github(\"ummel/fusionModel\") library(fusionModel) fusionModel v2.2.1 | https://github.com/ummel/fusionModel"},{"path":"https://ummel.github.io/fusionModel/index.html","id":"simple-fusion","dir":"","previous_headings":"","what":"Simple fusion","title":"Data fusion and analysis of synthetic data in R","text":"package includes example microdata 2015 Residential Energy Consumption Survey (see ?recs details). real-world use cases, donor recipient data typically independent vary sample size. illustrative purposes, randomly split recs microdata separate “donor” “recipient” datasets equal number observations. recipient dataset contains 13 variables shared donor. shared “predictor” variables provide statistical link two datasets. fusionModel exploits information shared variables. 5 “fusion variables” unique donor. variables fused recipient. includes mix continuous categorical (factor) variables. create fusion model using train() function. minimal usage shown . See ?train additional function arguments options. default, results “.fsn” (fusion) object saved “fusion_model.fsn” current working directory. fuse variables recipient, simply pass recipient data path .fsn model fuse() function. variable specified fusion.vars fused order provided. default, fuse() generates single implicate (version) synthetic outcomes. Later, ’ll work multiple implicates perform proper analysis uncertainty estimation. Let’s look recipient dataset’s fused/simulated variables. Note results look different, call fuse() generates unique, probabilistic set outcomes. can quick sanity checks compare distribution fusion variables donor sim. , least, confirms fusion output obviously wrong. Later, ’ll perform formal internal validation exercise using multiple implicates. can look kernel density plots non-zero values continuous variables see univariate distributions donor generally similar sim.","code":"# Rows to use for donor dataset d <- seq(from = 1, to = nrow(recs), by = 2)  # Create donor and recipient datasets donor <- recs[d, c(2:16, 20:22)] recipient <- recs[-d, 2:14]  # Specify fusion and shared/common predictor variables predictor.vars <- names(recipient) fusion.vars <- setdiff(names(donor), predictor.vars) predictor.vars [1] \"income\"      \"age\"         \"race\"        \"education\"   \"employment\"   [6] \"hh_size\"     \"division\"    \"urban_rural\" \"climate\"     \"renter\"      [11] \"home_type\"   \"year_built\"  \"heat_type\" # The variables to be fused sapply(donor[fusion.vars], class) $insulation [1] \"ordered\" \"factor\"   $aircon [1] \"factor\"  $square_feet [1] \"integer\"  $electricity [1] \"numeric\"  $natural_gas [1] \"numeric\" # Train a fusion model fsn.model <- train(data = donor,                     y = fusion.vars,                     x = predictor.vars) 5 fusion variables 13 initial predictor variables 2843 observations Using all available predictors for each fusion variable Training step 1 of 5: insulation Training step 2 of 5: aircon Training step 3 of 5: square_feet -- R-squared of cluster means: 0.967  -- Number of neighbors in each cluster:    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.     10.0    49.0   141.0   200.6   357.0   498.0  Training step 4 of 5: electricity -- R-squared of cluster means: 0.966  -- Number of neighbors in each cluster:    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    10.00   51.75  115.00  176.02  281.25  498.00  Training step 5 of 5: natural_gas -- R-squared of cluster means: 0.968  -- Number of neighbors in each cluster:    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.     10.0    54.0   129.0   170.1   247.0   499.0  Fusion model saved to: /home/kevin/Documents/Projects/fusionModel/fusion_model.fsn  Total processing time: 8.53 secs # Fuse 'fusion.vars' to the recipient sim <- fuse(data = recipient,              fsn = fsn.model) 5 fusion variables 13 initial predictor variables 2843 observations Generating 1 implicate  Fusion step 1 of 5: insulation -- Predicting LightGBM models -- Simulating fused values Fusion step 2 of 5: aircon -- Predicting LightGBM models -- Simulating fused values Fusion step 3 of 5: square_feet -- Predicting LightGBM models -- Simulating fused values Fusion step 4 of 5: electricity -- Predicting LightGBM models -- Simulating fused values Fusion step 5 of 5: natural_gas -- Predicting LightGBM models -- Simulating fused values Total processing time: 0.8 secs head(sim) M           insulation                          aircon square_feet 1: 1       Well insulated Central air conditioning system        1956 2: 1       Well insulated Central air conditioning system        1621 3: 1 Adequately insulated             No air conditioning         558 4: 1 Adequately insulated Central air conditioning system        3072 5: 1 Adequately insulated Central air conditioning system        1010 6: 1 Adequately insulated             No air conditioning        1910    electricity natural_gas 1:       17000         0.0 2:        6070       146.2 3:        1334         0.0 4:        9620       797.0 5:       37500         0.0 6:       11240       223.0 sim <- data.frame(sim)  # Compare means of the continuous variables cbind(donor = colMeans(donor[fusion.vars[3:5]]), sim = colMeans(sim[fusion.vars[3:5]])) donor        sim square_feet  2070.784  2012.7306 electricity 10994.517 10675.6508 natural_gas   338.154   323.5523 # Compare frequencies of categorical variable classes cbind(donor = table(donor$insulation), sim = table(sim$insulation)) donor  sim Not insulated           40   40 Poorly insulated       459  443 Adequately insulated  1401 1419 Well insulated         943  941 cbind(donor = table(donor$aircon), sim = table(sim$aircon)) donor  sim Central air conditioning system             1788 1818 Individual window/wall or portable units     545  545 Both a central system and individual units   125  119 No air conditioning                          385  361"},{"path":"https://ummel.github.io/fusionModel/index.html","id":"advanced-fusion","dir":"","previous_headings":"","what":"Advanced fusion","title":"Data fusion and analysis of synthetic data in R","text":"call train(), specify set hyperparameters search training LightGBM gradient boosting model (see ?train details). hyperparameters can used tune underlying GBM models better cross-validated performance. also set nfolds = 10 (default 5) indicate number cross-validation folds use. Since requires additional computation, cores argument used enable parallel processing. generally want create multiple versions simulated fusion variables – called implicates – order reduce bias point estimates calculate associated uncertainty. can using M argument within fuse(). generate 10 implicates; .e. 10 unique, probabilistic representations recipient records might look like respect fusion variables. Note implicate sim10 identified “M” variable/column.","code":"# Train a fusion model with variable blocks fsn.model <- train(data = donor,                     y = fusion.vars,                     x = predictor.vars,                    nfolds = 10,                    hyper = list(boosting = c(\"gbdt\", \"goss\"),                                 num_leaves = c(10, 30),                                 feature_fraction = c(0.7, 0.9)),                    cores = 2) 5 fusion variables 13 initial predictor variables 2843 observations Using all available predictors for each fusion variable Using OpenMP multithreading within LightGBM (2 cores) Training step 1 of 5: insulation Training step 2 of 5: aircon Training step 3 of 5: square_feet -- R-squared of cluster means: 0.971  -- Number of neighbors in each cluster:    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.     10.0    61.0   142.0   198.4   330.0   499.0  Training step 4 of 5: electricity -- R-squared of cluster means: 0.971  -- Number of neighbors in each cluster:    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.     10.0    61.0   179.0   220.7   388.0   499.0  Training step 5 of 5: natural_gas -- R-squared of cluster means: 0.959  -- Number of neighbors in each cluster:    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.     10.0    70.0   193.0   217.6   340.0   499.0  Fusion model saved to: /home/kevin/Documents/Projects/fusionModel/fusion_model.fsn  Total processing time: 44.9 secs # Fuse multiple implicates to the recipient sim10 <- fuse(data = recipient,                fsn = fsn.model,               M = 10) 5 fusion variables 13 initial predictor variables 2843 observations Generating 10 implicates  Fusion step 1 of 5: insulation -- Predicting LightGBM models -- Simulating fused values Fusion step 2 of 5: aircon -- Predicting LightGBM models -- Simulating fused values Fusion step 3 of 5: square_feet -- Predicting LightGBM models -- Simulating fused values Fusion step 4 of 5: electricity -- Predicting LightGBM models -- Simulating fused values Fusion step 5 of 5: natural_gas -- Predicting LightGBM models -- Simulating fused values Total processing time: 2.38 secs head(sim10) M           insulation                                   aircon square_feet 1: 1       Well insulated          Central air conditioning system        1728 2: 1 Adequately insulated          Central air conditioning system        1492 3: 1       Well insulated                      No air conditioning         636 4: 1       Well insulated          Central air conditioning system        2948 5: 1       Well insulated Individual window/wall or portable units        1140 6: 1 Adequately insulated                      No air conditioning        1579    electricity natural_gas 1:       13700         0.0 2:       15200         0.0 3:        1880        89.7 4:        8670       651.0 5:       14460         0.0 6:       14220         0.0 table(sim10$M) 1    2    3    4    5    6    7    8    9   10  2843 2843 2843 2843 2843 2843 2843 2843 2843 2843"},{"path":"https://ummel.github.io/fusionModel/index.html","id":"analyzing-fused-data","dir":"","previous_headings":"","what":"Analyzing fused data","title":"Data fusion and analysis of synthetic data in R","text":"fused values inherently probabilistic, reflecting uncertainty underlying statistical models. Multiple implicates needed calculate unbiased point estimates associated uncertainty particular analysis data. general, implicates preferable requires computation. Since proper analysis multiple implicates can rather cumbersome – coding mathematical standpoint – analyze() function provides convenient way calculate point estimates associated uncertainty common analyses. Potential analyses currently include variable means, proportions, sums, counts, medians, (optionally) calculated population subgroups. example, calculate mean value “electricity” variable across observations recipient dataset, following. response variable categorical, analyze() automatically returns proportions associated factor level. want perform analysis across subsets recipient population – example, calculate mean value “electricity” household “income” – can use static arguments. see mean electricity consumption increases household income. also possible multiple kinds analyses single call analyze(). example, following call calculates mean value “natural_gas” “square_feet”, median value “square_feet”, sum “electricity” (.e. total consumption) “insulation” (.e. total count level). estimates calculated population subgroup defined intersection “race” “urban_rural” status. can (example) isolate results white households rural areas. Notice mean estimate “square_feet” exceeds median, reflecting skewed distribution. complicated analyses can performed using custom fun argument analyze(). See Examples section ?analyze.","code":"analyze(x = list(mean = \"electricity\"),         implicates = sim10) Using 10 implicates Assuming uniform sample weights Total processing time: 0.0344 secs         N           y level type      est      moe 1: 2843 electricity    NA mean 10808.86 232.2422 analyze(x = list(mean = \"aircon\"),         implicates = sim10) Using 10 implicates Assuming uniform sample weights Total processing time: 0.0903 secs         N      y                                      level       type        est 1: 2843 aircon            Central air conditioning system proportion 0.62866690 2: 2843 aircon   Individual window/wall or portable units proportion 0.19212100 3: 2843 aircon Both a central system and individual units proportion 0.04400281 4: 2843 aircon                        No air conditioning proportion 0.13520929            moe 1: 0.017603881 2: 0.015537772 3: 0.007524075 4: 0.014413665 analyze(x = list(mean = \"electricity\"),         implicates = sim10,         static = recipient,         by = \"income\") Using 10 implicates Assuming uniform sample weights Total processing time: 0.0229 secs                    income   N           y level type       est       moe 1:    Less than $20,000 471 electricity    NA mean  8884.312  478.0797 2:    $20,000 - $39,999 645 electricity    NA mean  9719.018  456.4553 3:    $40,000 - $59,999 464 electricity    NA mean 10537.228  538.0130 4:   $60,000 to $79,999 372 electricity    NA mean 11314.790  572.3587 5:   $80,000 to $99,999 248 electricity    NA mean 11550.401  693.7652 6: $100,000 to $119,999 222 electricity    NA mean 12138.498  850.3994 7: $120,000 to $139,999 119 electricity    NA mean 12490.518 1113.5339 8:     $140,000 or more 302 electricity    NA mean 13683.182  728.6027 result <- analyze(x = list(mean = c(\"natural_gas\", \"square_feet\"),                            median = \"square_feet\",                            sum = c(\"electricity\", \"insulation\")),                   implicates = sim10,                   static = recipient,                   by = c(\"race\", \"urban_rural\")) Using 10 implicates Assuming uniform sample weights Total processing time: 1.63 secs subset(result, race == \"White\" & urban_rural == \"Rural\") race urban_rural   N           y                level   type          est 1: White       Rural 503 electricity                 <NA>    sum 6906696.6100 2: White       Rural 503  insulation        Not insulated  count       5.6000 3: White       Rural 503  insulation     Poorly insulated  count      68.4000 4: White       Rural 503  insulation Adequately insulated  count     209.7000 5: White       Rural 503  insulation       Well insulated  count     219.3000 6: White       Rural 503 natural_gas                 <NA>   mean     157.5723 7: White       Rural 503 square_feet                 <NA>   mean    2387.3509 8: White       Rural 503 square_feet                 <NA> median    2159.4000             moe 1: 3.115890e+05 2: 5.653837e+00 3: 2.178315e+01 4: 3.144372e+01 5: 3.613723e+01 6: 2.579220e+01 7: 1.164896e+02 8: 1.573095e+02"},{"path":"https://ummel.github.io/fusionModel/index.html","id":"validating-fusion-models","dir":"","previous_headings":"","what":"Validating fusion models","title":"Data fusion and analysis of synthetic data in R","text":"validate() function provides convenient way perform internal validation tests synthetic variables fused back onto original donor data. allows us assess quality underlying fusion model; analogous assessing model skill comparing predictions observed training data. validate() compares analytical results derived using multiple-implicate fusion output derived using original donor microdata. performing analyses population subsets varying size, validate() estimates synthetic variables perform analyses varying difficulty/complexity. computes fusion variable means proportions subsets full sample – separately observed fused data – compares results. First, fuse multiple implicates fusion.vars using original donor data – recipient data, previously. Next, pass sim results validate(). argument subset_vars specifies want validation exercise compare observed (donor) simulated point estimates across population subsets defined “income”, “age”, “race”, “education”. See ?validate details. validate() output includes ggplot2 graphics helpfully summarize validation results. example, plot shows observed simulated point estimates compare, using median absolute percent error performance metric. see synthetic data good job reproducing point estimates fusion variables population subset question reasonably large. smaller subsets – .e. difficult analyses due small sample size – “square_feet”, “natural_gas”, “electricity” remain well modeled, error increases rapidly “aircon” “insulation”. information useful understanding kind reliability can expect particular variables types analyses, given underlying fusion model data.  Happy fusing!","code":"sim <- fuse(data = donor,             fsn = fsn.model,             M = 40) 5 fusion variables 13 initial predictor variables 2843 observations Generating 40 implicates  Fusion step 1 of 5: insulation -- Predicting LightGBM models -- Simulating fused values Fusion step 2 of 5: aircon -- Predicting LightGBM models -- Simulating fused values Fusion step 3 of 5: square_feet -- Predicting LightGBM models -- Simulating fused values Fusion step 4 of 5: electricity -- Predicting LightGBM models -- Simulating fused values Fusion step 5 of 5: natural_gas -- Predicting LightGBM models -- Simulating fused values Total processing time: 7.8 secs valid <- validate(observed = donor,                   implicates = sim,                   subset_vars = c(\"income\", \"age\", \"race\", \"education\")) Assuming uniform sample weights One-hot encoding categorical fusion variables Correlation between observed and fused values:    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    0.075   0.109   0.255   0.303   0.431   0.774  Processing validation analyses for 5 fusion variables Performed 1430 analyses across 130 subsets Smoothing validation metrics Average smoothed performance metrics across subset range:              y     est    vad   moe 1       aircon  0.0323  0.689  1.37 2  electricity  0.0225  0.419  1.06 3   insulation  0.0390  0.492  1.41 4  natural_gas  0.0277  0.500  1.06 5  square_feet  0.0146  0.788  1.18 Creating ggplot2 graphics   Total processing time: 3.14 secs valid$plots$est"},{"path":"https://ummel.github.io/fusionModel/reference/analyze.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyze fusion output — analyze","title":"Analyze fusion output — analyze","text":"Calculation point estimates associated margin error analyses using fused/synthetic microdata. Can calculate means, proportions, sums, counts, medians, optionally across population subgroups.","code":""},{"path":"https://ummel.github.io/fusionModel/reference/analyze.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analyze fusion output — analyze","text":"","code":"analyze(   x,   implicates,   static = NULL,   weight = NULL,   rep_weights = NULL,   by = NULL,   fun = NULL,   var_scale = 4,   cores = 1 )"},{"path":"https://ummel.github.io/fusionModel/reference/analyze.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analyze fusion output — analyze","text":"x List. Named list specifying desired analysis type(s) associated target variable(s). Example: x = list(mean = c(\"v1\", \"v2\"), median = \"v3\") translates : \"Return mean value variables v1 v2 median v3\". Supported analysis types include mean, sum, median. Mean sum automatically return proportions counts, respectively, target variable factor. Target variables must implicates, static, data.frame returned custom fun. implicates Data frame. Implicates synthetic (fused) variables. Typically generated fuse. implicates row-stacked identified integer column \"M\". static Data frame. Optional static (non-synthetic) variables vary across implicates. Note nrow(static) = nrow(implicates) / max(implicates$M) row-ordering assumed consistent static implicates. weight Character. Name observation weights column static. NULL (default), uniform weights assumed. rep_weights Character. Optional vector replicate weight columns static. provided, returned margin errors reflect additional variance due uncertainty sample weights. Character. Optional column name(s) implicates static (typically factors) collectively define set population subgroups analysis executed. NULL, analysis done whole sample. fun Function. Optional function applied input data prior executing analyses. Can used non-conventional/custom analyses. var_scale Scalar. Factor scale unadjusted replicate weight variance. determined survey design. default (var_scale = 4) appropriate ACS RECS. cores Integer. Number cores used. applicable Unix systems.","code":""},{"path":"https://ummel.github.io/fusionModel/reference/analyze.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analyze fusion output — analyze","text":"data.table reporting analysis results, possibly across subgroups defined . returned quantities include: N Number observations used analysis. y Target variable. level Levels factor target variables. type Type estimate returned: mean, proportion, sum, count, median. est Point estimate. moe Margin error associated 90% confidence interval.","code":""},{"path":"https://ummel.github.io/fusionModel/reference/analyze.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Analyze fusion output — analyze","text":"minimum, user must supply synthetic implicates (typically generated fuse). Inputs checked consistent dimensions. implicates contains single implicate rep_weights = NULL, \"typical\" standard error returned warning make sure user aware situation. Estimates standard errors requested analysis calculated separately implicate. final point estimate mean estimate across implicates. final standard error pooled SE across implicates, calculated using Rubin's pooling rules (1987) finite population adjustment degrees freedom (Barnard Rubin 1999). replicate weights provided, standard errors implicate calculated via variance estimates across replicates. Calculations leverage data.table operations speed memory efficiency. within-implicate variance calculated around point estimate (rather around mean replicates). equivalent mse = TRUE svrepdesign. seems appropriate method surveys. replicate weights provided, standard errors implicate calculated using variance within implicate. means, ratio variance approximation Cochran (1977) used, known good approximation bootstrapped SE's weighted means (Gatz Smith 1995). proportions, generalization unweighted SE formula used (see ). regression coefficients, standard error calculated summary.glm.","code":""},{"path":"https://ummel.github.io/fusionModel/reference/analyze.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Analyze fusion output — analyze","text":"Barnard, J., & Rubin, D.B. (1999). Small-sample degrees freedom multiple imputation. Biometrika, 86, 948-955. Cochran, W. G. (1977). Sampling Techniques (3rd Edition). Wiley, New York. Gatz, D.F., Smith, L. (1995). Standard Error Weighted Mean Concentration — . Bootstrapping vs Methods. Atmospheric Environment, vol. 29, . 11, 1185–1193. Rubin, D.B. (1987). Multiple imputation nonresponse surveys. Hoboken, NJ: Wiley.","code":""},{"path":"https://ummel.github.io/fusionModel/reference/analyze.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Analyze fusion output — analyze","text":"","code":"# Build a fusion model using RECS microdata fusion.vars <- c(\"electricity\", \"natural_gas\", \"aircon\") predictor.vars <- names(recs)[2:12] fsn.path <- train(data = recs, y = fusion.vars, x = predictor.vars) #> 3 fusion variables #> 11 initial predictor variables #> 5686 observations #> Using all available predictors for each fusion variable #> -- Training step 1 of 3: electricity #>   -- R-squared of cluster means: 0.975  #>   -- Number of neighbors in each cluster: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>      10      71     151     198     315     499  #> -- Training step 2 of 3: natural_gas #>   -- R-squared of cluster means: 0.973  #>   -- Number of neighbors in each cluster: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>    10.0    69.0   145.0   189.2   294.5   498.0  #> -- Training step 3 of 3: aircon #> Fusion model saved to: #>  /home/runner/work/fusionModel/fusionModel/docs/reference/fusion_model.fsn  #> Total processing time: 9.52 secs   # Generate 30 implicates of the 'fusion.vars' using original RECS as the recipient sim <- fuse(data = recs, fsn = fsn.path, M = 30) #> 3 fusion variables #> 11 initial predictor variables #> 5686 observations #> Generating 30 implicates  #> Fusion step 1 of 3: electricity #> -- Predicting LightGBM models #> -- Simulating fused values #> Fusion step 2 of 3: natural_gas #> -- Predicting LightGBM models #> -- Simulating fused values #> Fusion step 3 of 3: aircon #> -- Predicting LightGBM models #> -- Simulating fused values #> Total processing time: 9.74 secs  head(sim) #>    M electricity natural_gas                                   aircon #> 1: 1        6160       240.3          Central air conditioning system #> 2: 1       10840       371.5 Individual window/wall or portable units #> 3: 1       12130       732.0 Individual window/wall or portable units #> 4: 1        8920       717.0          Central air conditioning system #> 5: 1        6830      1277.0          Central air conditioning system #> 6: 1        5330       146.2          Central air conditioning system  #---------  # Multiple types of analyses can be done at once # This calculates estimates using the full sample result <- analyze(x = list(mean = c(\"natural_gas\", \"aircon\"),                            median = \"electricity\",                            sum = c(\"electricity\", \"aircon\")),                   implicates = sim,                   weight = \"weight\") #> Using 30 implicates #> Assuming uniform sample weights #> Total processing time: 0.699 secs   View(result) #> Warning: unable to open display #> Error in .External2(C_dataviewer, x, title): unable to start data viewer  #-----  # Mean electricity consumption, by climate zone and urban/rural status result1 <- analyze(x = list(mean = \"electricity\"),                   implicates = sim,                   static = recs,                   weight = \"weight\",                   by = c(\"climate\", \"urban_rural\")) #> Using 30 implicates #> Total processing time: 0.0817 secs   # Same as above but including sample weight uncertainty # Note that only the first 30 replicate weights are used internally result2 <- analyze(x = list(mean = \"electricity\"),                   implicates = sim,                   static = recs,                   weight = \"weight\",                   rep_weights = paste0(\"rep_\", 1:96),                   by = c(\"climate\", \"urban_rural\")) #> Using 30 implicates #> Using 30 of 96 replicate weights #> Total processing time: 0.17 secs   # Helper function for comparison plots pfun <- function(x, y) {plot(x, y); abline(0, 1, lty = 2)}  # Inclusion of replicate weights does not affect estimates, but it does # increase margin of error due to uncertainty in RECS sample weights pfun(result1$est, result2$est)  pfun(result1$moe, result2$moe)   # Notice that relative uncertainty declines with subset size plot(result1$N, result1$moe / result1$est)   #-----  # Use a custom function to perform more complex analyses # Custom function should return a data frame with non-standard target variables  my_fun <- function(data) {    # Manipulate 'data' as desired   # All variables in 'implicates' and 'static' are available    # Construct electricity consumption per square foot   kwh_per_ft2 <- data$electricity / data$square_feet    # Binary (T/F) indicator if household uses natural gas   use_natural_gas <- data$natural_gas > 0    # Return data.frame of custom variables to be analyzed   data.frame(kwh_per_ft2, use_natural_gas) }  # Do analysis using variables produced by custom function # Can included non-custom target variables as well result <- analyze(x = list(mean = c(\"kwh_per_ft2\", \"use_natural_gas\", \"electricity\")),                   implicates = sim,                   static = recs,                   weight = \"weight\",                   fun = my_fun) #> Using 30 implicates #> Applying custom 'fun' to data #> Total processing time: 1.36 secs"},{"path":"https://ummel.github.io/fusionModel/reference/fuse.html","id":null,"dir":"Reference","previous_headings":"","what":"Fuse variables to a recipient dataset — fuse","title":"Fuse variables to a recipient dataset — fuse","text":"Fuse variables recipient dataset using .fsn model produced train. Output can passed analyze validate.","code":""},{"path":"https://ummel.github.io/fusionModel/reference/fuse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fuse variables to a recipient dataset — fuse","text":"","code":"fuse(data, fsn, fsd = NULL, M = 1, kblock = 10, margin = 2, cores = 1)"},{"path":"https://ummel.github.io/fusionModel/reference/fuse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fuse variables to a recipient dataset — fuse","text":"data Data frame. Recipient dataset. categorical variables factors ordered whenever possible. Data types levels strictly validated predictor variables defined fsn. fsn Character. Path fusion model file (.fsn) generated train. fsd Character. Optional results file created ending .fsd (.e. \"fused data\"). Can read read_fsd. fsd = NULL (default), fusion results returned data.table. M Integer. Number implicates simulate. kblock Integer. Fixed number nearest neighbors use fusing variables block. Must >= 5 <= 30. applicable variables fused (.e. block). margin Numeric. Safety margin used estimating many implicates can processed memory . Set higher fuse() experiences memory shortfall. cores Integer. Number cores used. LightGBM prediction parallel-enabled systems OpenMP available.","code":""},{"path":"https://ummel.github.io/fusionModel/reference/fuse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fuse variables to a recipient dataset — fuse","text":"fsd = NULL, data.table number rows equal M * nrow(data). Integer column \"M\" indicates implicate assignment observation. Note ordering recipient observations consistent within implicates, change row order using analyze. fsd specified, path .fsd file results written. Metadata column classes factor levels stored column names. read_fsd used load files saved via fsd argument.","code":""},{"path":"https://ummel.github.io/fusionModel/reference/fuse.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fuse variables to a recipient dataset — fuse","text":"UPDATE.","code":""},{"path":"https://ummel.github.io/fusionModel/reference/fuse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fuse variables to a recipient dataset — fuse","text":"","code":"# Build a fusion model using RECS microdata # Note that \"fusion_model.fsn\" will be written to working directory ?recs fusion.vars <- c(\"electricity\", \"natural_gas\", \"aircon\") predictor.vars <- names(recs)[2:12] fsn.path <- train(data = recs, y = fusion.vars, x = predictor.vars) #> 3 fusion variables #> 11 initial predictor variables #> 5686 observations #> Using all available predictors for each fusion variable #> -- Training step 1 of 3: electricity #>   -- R-squared of cluster means: 0.973  #>   -- Number of neighbors in each cluster: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>    10.0    72.0   152.0   196.8   307.0   499.0  #> -- Training step 2 of 3: natural_gas #>   -- R-squared of cluster means: 0.976  #>   -- Number of neighbors in each cluster: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>    10.0    64.0   149.0   198.4   333.0   498.0  #> -- Training step 3 of 3: aircon #> Fusion model saved to: #>  /home/runner/work/fusionModel/fusionModel/docs/reference/fusion_model.fsn  #> Total processing time: 7.46 secs   # Generate single implicate of synthetic 'fusion.vars', #  using original RECS data as the recipient recipient <- recs[predictor.vars] sim <- fuse(data = recipient, fsn = fsn.path) #> 3 fusion variables #> 11 initial predictor variables #> 5686 observations #> Generating 1 implicate  #> Fusion step 1 of 3: electricity #> -- Predicting LightGBM models #> -- Simulating fused values #> Fusion step 2 of 3: natural_gas #> -- Predicting LightGBM models #> -- Simulating fused values #> Fusion step 3 of 3: aircon #> -- Predicting LightGBM models #> -- Simulating fused values #> Total processing time: 0.774 secs  head(sim) #>    M electricity natural_gas                                   aircon #> 1: 1       11090         517          Central air conditioning system #> 2: 1       25530           0          Central air conditioning system #> 3: 1       17940         315          Central air conditioning system #> 4: 1        6140        1160          Central air conditioning system #> 5: 1        5480         628 Individual window/wall or portable units #> 6: 1        4590           0 Individual window/wall or portable units  # Calling fuse() again produces different results sim <- fuse(data = recipient, fsn = fsn.path) #> 3 fusion variables #> 11 initial predictor variables #> 5686 observations #> Generating 1 implicate  #> Fusion step 1 of 3: electricity #> -- Predicting LightGBM models #> -- Simulating fused values #> Fusion step 2 of 3: natural_gas #> -- Predicting LightGBM models #> -- Simulating fused values #> Fusion step 3 of 3: aircon #> -- Predicting LightGBM models #> -- Simulating fused values #> Total processing time: 0.788 secs  head(sim) #>    M electricity natural_gas                                     aircon #> 1: 1       10010       215.7            Central air conditioning system #> 2: 1       11330         0.0   Individual window/wall or portable units #> 3: 1        2255       389.5 Both a central system and individual units #> 4: 1       13330         0.0            Central air conditioning system #> 5: 1       10130       628.0   Individual window/wall or portable units #> 6: 1        2487       294.0   Individual window/wall or portable units  # Generate multiple implicates sim <- fuse(data = recipient, fsn = fsn.path, M = 5) #> 3 fusion variables #> 11 initial predictor variables #> 5686 observations #> Generating 5 implicates  #> Fusion step 1 of 3: electricity #> -- Predicting LightGBM models #> -- Simulating fused values #> Fusion step 2 of 3: natural_gas #> -- Predicting LightGBM models #> -- Simulating fused values #> Fusion step 3 of 3: aircon #> -- Predicting LightGBM models #> -- Simulating fused values #> Total processing time: 2.01 secs  head(sim) #>    M electricity natural_gas                                     aircon #> 1: 1        5330         393                        No air conditioning #> 2: 1        8400         164            Central air conditioning system #> 3: 1       23700         619 Both a central system and individual units #> 4: 1       10810         443            Central air conditioning system #> 5: 1        2770         692            Central air conditioning system #> 6: 1        3706           0   Individual window/wall or portable units table(sim$M) #>  #>    1    2    3    4    5  #> 5686 5686 5686 5686 5686   # Optionally, write results directly to disk # Note that \"results.fsd\" will be written to working directory sim <- fuse(data = recipient, fsn = fsn.path, M = 5, fsd = \"results.fsd\") #> 3 fusion variables #> 11 initial predictor variables #> 5686 observations #> Generating 5 implicates  #> Fusion step 1 of 3: electricity #> -- Predicting LightGBM models #> -- Simulating fused values #> Fusion step 2 of 3: natural_gas #> -- Predicting LightGBM models #> -- Simulating fused values #> Fusion step 3 of 3: aircon #> -- Predicting LightGBM models #> -- Simulating fused values #> Writing fusion output to .fsd file  #> Fusion results saved to: #>  /home/runner/work/fusionModel/fusionModel/docs/reference/results.fsd  #> Total processing time: 2.05 secs  sim <- read_fsd(sim) #> Error in data.table::fread(file = csv, data.table = TRUE, nThread = cores): To read gz and bz2 files directly, fread() requires 'R.utils' package which cannot be found. Please install 'R.utils' using 'install.packages('R.utils')'. head(sim) #> [1] \"/home/runner/work/fusionModel/fusionModel/docs/reference/results.fsd\""},{"path":"https://ummel.github.io/fusionModel/reference/fusionModel-package.html","id":null,"dir":"Reference","previous_headings":"","what":"fusionModel: Data fusion and analysis of synthetic data in R — fusionModel-package","title":"fusionModel: Data fusion and analysis of synthetic data in R — fusionModel-package","text":"Data fusion analysis synthetic data R.","code":""},{"path":[]},{"path":"https://ummel.github.io/fusionModel/reference/fusionModel-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"fusionModel: Data fusion and analysis of synthetic data in R — fusionModel-package","text":"Maintainer: Kevin Ummel ummel@berkeley.edu contributors: Karthik Akkiraju [contributor] Miguel Poblete Cazenave [contributor]","code":""},{"path":"https://ummel.github.io/fusionModel/reference/plot_valid.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot validation results — plot_valid","title":"Plot validation results — plot_valid","text":"Creates optionally saves disk representative plots validation results returned validate. Requires suggested ggplot2 package. function (default) called within validate. Can useful save graphics disk generate plots subset fusion variables.","code":""},{"path":"https://ummel.github.io/fusionModel/reference/plot_valid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot validation results — plot_valid","text":"","code":"plot_valid(valid, y = NULL, path = NULL, cores = 1, ...)"},{"path":"https://ummel.github.io/fusionModel/reference/plot_valid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot validation results — plot_valid","text":"valid Object returned validate. y Character. Fusion variables use validation graphics. Useful plotting partial validation results. Default use fusion variables present valid. path Character. Path directory .png graphics saved. Directory created necessary. NULL (default), files saved disk. cores Integer. Number cores used. applicable Unix systems. ... Arguments passed ggsave control .png graphics saved disk.","code":""},{"path":"https://ummel.github.io/fusionModel/reference/plot_valid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot validation results — plot_valid","text":"list \"plots\", \"smooth\", \"data\" slots. \"plots\" slot contains following ggplot objects: est: Comparison point estimates (median absolute percent error). moe: Comparison 90% margin error (median ratio simulated--observed MOE). Additional named slots (one fusion variables) contain plots described scatterplot results. \"smooth\" data frame plotting values used produce smoothed median plots. \"data\" data frame complete validation results returned original call validate.","code":""},{"path":"https://ummel.github.io/fusionModel/reference/plot_valid.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot validation results — plot_valid","text":"Validation results visualized convey expected, typical (median) performance fusion variables. , well simulated data match observed data respect point estimates confidence intervals population subsets various size? Plausible error metrics derived input validation data plotting. comparison point estimates, error metric absolute percent error continuous variables; categorical case absolute error scaled maximum possible error 1. Since metrics strictly comparable, -variable plots denote categorical fusion variables dotted lines. given fusion variable, error metric exhibit variation (often quite skewed) even subsets comparable size, due fact subset looks unique partition data. order convey expected, typical performance varies subset size, smoothed median error conditional subset size approximated plotted.","code":""},{"path":"https://ummel.github.io/fusionModel/reference/plot_valid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot validation results — plot_valid","text":"","code":"# Build a fusion model using RECS microdata # Note that \"fusion_model.fsn\" will be written to working directory fusion.vars <- c(\"electricity\", \"natural_gas\", \"aircon\") predictor.vars <- names(recs)[2:12] fsn.path <- train(data = recs,                   y = fusion.vars,                   x = predictor.vars,                   weight = \"weight\") #> 3 fusion variables #> 11 initial predictor variables #> 5686 observations #> Using all available predictors for each fusion variable #> -- Training step 1 of 3: electricity #>   -- R-squared of cluster means: 0.977  #>   -- Number of neighbors in each cluster: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>    10.0    83.0   176.0   213.9   345.2   500.0  #> -- Training step 2 of 3: natural_gas #>   -- R-squared of cluster means: 0.974  #>   -- Number of neighbors in each cluster: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>    10.0    60.0   136.0   184.5   285.0   498.0  #> -- Training step 3 of 3: aircon #> Fusion model saved to: #>  /home/runner/work/fusionModel/fusionModel/docs/reference/fusion_model.fsn  #> Total processing time: 7.5 secs   # Fuse back onto the donor data (multiple implicates) sim <- fuse(data = recs,             file = fsn.path,             M = 30) #> Error in fuse(data = recs, file = fsn.path, M = 30): unused argument (file = fsn.path)  # Calculate validation results but do not generate plots valid <- validate(observed = recs,                   implicates = sim,                   subset_vars = c(\"income\", \"education\", \"race\", \"urban_rural\"),                   weight = \"weight\",                   plot = FALSE) #> Error in eval(expr, envir, enclos): object 'sim' not found  # Create validation plots valid <- plot_valid(valid) #> Error in eval(expr, envir, enclos): object 'valid' not found  # View some of the plots valid$plots$est #> Error in eval(expr, envir, enclos): object 'valid' not found valid$plots$moe #> Error in eval(expr, envir, enclos): object 'valid' not found valid$plots$electricity$bias #> Error in eval(expr, envir, enclos): object 'valid' not found  # Can also save the plots to disk at creation # Will save .png files to 'valid_plots' folder in working directory # Note that it is fine to pass a 'valid' object with existing $plots slot # In that case, the plots are simply re-generated vplots <- plot_valid(valid,                      path = file.path(getwd(), \"valid_plots\"),                      width = 8, height = 6) #> Error in eval(expr, envir, enclos): object 'valid' not found"},{"path":"https://ummel.github.io/fusionModel/reference/prepXY.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare the 'x' and 'y' inputs — prepXY","title":"Prepare the 'x' and 'y' inputs — prepXY","text":"Optional--useful function : 1) provide plausible ordering 'y' (fusion) variables 2) identify subset 'x' (predictor) variables likely consequential subsequent model training. Output can passed directly train. useful large datasets many /highly-correlated predictors. Employs absolute Spearman rank correlation screen LASSO models (via glmnet) return plausible ordering 'y' preferred subset 'x' variables associated .","code":""},{"path":"https://ummel.github.io/fusionModel/reference/prepXY.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare the 'x' and 'y' inputs — prepXY","text":"","code":"prepXY(   data,   y,   x,   weight = NULL,   cor_thresh = 0.05,   lasso_thresh = 0.95,   xmax = 100,   xforce = NULL,   fraction = 1,   cores = 1 )"},{"path":"https://ummel.github.io/fusionModel/reference/prepXY.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare the 'x' and 'y' inputs — prepXY","text":"data Data frame. Training dataset. categorical variables factors ordered whenever possible. y Character list. Variables data eventually fuse recipient dataset. y list, entry character vector possibly indicating multiple variables fuse block. x Character. Predictor variables data common donor eventual recipient. weight Character. Name observation weights column data. NULL (default), uniform weights assumed. cor_thresh Numeric. Predictors exhibit less cor_thresh absolute Spearman (rank) correlation y variable screened prior LASSO step. Fast exclusion predictors LASSO step probably need consider. lasso_thresh Numeric. Controls aggressively LASSO step screens predictors. Lower value aggressive. lasso_thresh = 0.95, example, retains predictors collectively explain least 95% deviance explained \"full\" model. xmax Integer. Maximum number predictors returned LASSO step. strictly control number final predictors returned (especially categorical y variables), useful setting () soft upper bound. Lower xmax can help control computation time large number x pass correlation screen. xmax = Inf imposes restriction. xforce Character. Subset x variables \"force\" included predictors results. fraction Numeric. Fraction observations data randomly sample. larger datasets, sampling often minimal effect results speeds computation. cores Integer. Number cores used. applicable Unix systems.","code":""},{"path":"https://ummel.github.io/fusionModel/reference/prepXY.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare the 'x' and 'y' inputs — prepXY","text":"List named slots \"y\" \"x\". list length. Former gives preferred fusion order. Latter gives preferred sets predictor variables.","code":""},{"path":"https://ummel.github.io/fusionModel/reference/prepXY.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare the 'x' and 'y' inputs — prepXY","text":"","code":"y <- names(recs)[c(14:16, 20:22)] x <- names(recs)[2:13]  # Fusion variable \"blocks\" are respected by prepXY() y <- c(list(y[1:2]), y[-c(1:2)])  # Do the prep work... prep <- prepXY(data = recs, y = y, x = x) #> Identifying 'x' that pass absolute Spearman correlation threshold #> Fitting full models for each 'y' #> Iteratively constructing preferred fusion order #> Retained 12 of 12 predictor variables #> Total processing time: 1.1 secs   # The result can be passed to train() train(data = recs, y = prep$y, x = prep$x) #> 6 fusion variables #> 12 initial predictor variables #> 5686 observations #> Using specified set of predictors for each fusion variable #> -- Training step 1 of 5: aircon #> -- Training step 2 of 5: square_feet #>   -- R-squared of cluster means: 0.979  #>   -- Number of neighbors in each cluster: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   10.00   65.75  172.50  212.03  353.00  499.00  #> -- Training step 3 of 5: electricity #>   -- R-squared of cluster means: 0.969  #>   -- Number of neighbors in each cluster: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>    10.0    60.0   130.0   172.7   252.2   498.0  #> -- Training step 4 of 5: natural_gas #>   -- R-squared of cluster means: 0.972  #>   -- Number of neighbors in each cluster: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   10.00   62.75  138.00  184.49  290.00  498.00  #> -- Training step 5 of 5: heat_type, insulation #> Fusion model saved to: #>  /home/runner/work/fusionModel/fusionModel/docs/reference/fusion_model.fsn  #> Total processing time: 14.4 secs"},{"path":"https://ummel.github.io/fusionModel/reference/read_fsd.html","id":null,"dir":"Reference","previous_headings":"","what":"Read fusion output from disk — read_fsd","title":"Read fusion output from disk — read_fsd","text":"Read fusion output written directly disk via fuse.","code":""},{"path":"https://ummel.github.io/fusionModel/reference/read_fsd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read fusion output from disk — read_fsd","text":"","code":"read_fsd(fsd, cores = data.table::getDTthreads())"},{"path":"https://ummel.github.io/fusionModel/reference/read_fsd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read fusion output from disk — read_fsd","text":"fsd Character. File path ending .fsd produced call fuse. cores Integer. Number cores used fread.","code":""},{"path":"https://ummel.github.io/fusionModel/reference/read_fsd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read fusion output from disk — read_fsd","text":"data.table integer column \"M\" indicating implicate assignment observation. Note ordering recipient observations consistent within implicates, change row order using analyze validate.","code":""},{"path":"https://ummel.github.io/fusionModel/reference/read_fsd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read fusion output from disk — read_fsd","text":"file written fuse includes specially formatted metadata column names read_fsd uses construct appropriate output values classes. Reading fsd different file reader function give correct results.","code":""},{"path":"https://ummel.github.io/fusionModel/reference/read_fsd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read fusion output from disk — read_fsd","text":"","code":"# Build a fusion model using RECS microdata # Note that \"fusion_model.fsn\" will be written to working directory ?recs fusion.vars <- c(\"electricity\", \"natural_gas\", \"aircon\") predictor.vars <- names(recs)[2:12] fsn.path <- train(data = recs, y = fusion.vars, x = predictor.vars) #> 3 fusion variables #> 11 initial predictor variables #> 5686 observations #> Using all available predictors for each fusion variable #> -- Training step 1 of 3: electricity #>   -- R-squared of cluster means: 0.975  #>   -- Number of neighbors in each cluster: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>    10.0    67.0   152.0   197.2   313.5   499.0  #> -- Training step 2 of 3: natural_gas #>   -- R-squared of cluster means: 0.974  #>   -- Number of neighbors in each cluster: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>      10      65     150     193     302     499  #> -- Training step 3 of 3: aircon #> Fusion model saved to: #>  /home/runner/work/fusionModel/fusionModel/docs/reference/fusion_model.fsn  #> Total processing time: 7.43 secs   # Write fusion output directly to disk # Note that \"results.fsd\" will be written to working directory recipient <- recs[predictor.vars] sim <- fuse(data = recipient, fsn = fsn.path, M = 5, csv = \"results.fsd\") #> Error in fuse(data = recipient, fsn = fsn.path, M = 5, csv = \"results.fsd\"): unused argument (csv = \"results.fsd\")  # Read the fusion output saved to disk sim <- read_fsd(sim) #> Error in eval(expr, envir, enclos): object 'sim' not found head(sim) #> Error in eval(expr, envir, enclos): object 'sim' not found"},{"path":"https://ummel.github.io/fusionModel/reference/recs.html","id":null,"dir":"Reference","previous_headings":"","what":"Data from the 2015 Residential Energy Consumption Survey (RECS) — recs","title":"Data from the 2015 Residential Energy Consumption Survey (RECS) — recs","text":"Pre-processed, household-level microdata containing selection 31 variables derived 2015 RECS, plus survey replicate weights. variety data types included. missing values. Variable names altered original.","code":""},{"path":"https://ummel.github.io/fusionModel/reference/recs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data from the 2015 Residential Energy Consumption Survey (RECS) — recs","text":"","code":"recs"},{"path":"https://ummel.github.io/fusionModel/reference/recs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data from the 2015 Residential Energy Consumption Survey (RECS) — recs","text":"tibble 5,686 rows 124 variables: weight Primary sampling weight income Annual gross household income last year age Respondent age race Respondent race education Highest education completed respondent employment Respondent employment status hh_size Number household members division Census Division urban_rural Census 2010 Urban Type climate IECC Climate Code renter household renting home? home_type Type housing unit year_built Range housing unit built square_feet Total square footage insulation Level insulation heating Main space heating fuel aircon Type air conditioning equipment used centralac_age Age central air conditioner televisions Number televisions used disconnect Frequency receiving disconnect notice electricity Total annual electricity usage, kilowatthours natural_gas Total annual natural gas usage, hundred cubic feet fuel_oil Total annual fuel oil/kerosene usage, gallons propane Total annual propane usage, gallons propane_btu Total annual propane usage, thousand Btu propane_expend Total annual propane expenditure, dollars heating_share Share total energy used space heating heating_share Share total energy used cooling (AC fans) other_share Share total energy used end-uses use_ng Logical indicating household uses natural gas have_ac Logical indicating household air conditioning rep_1:rep_96 Replicate weights uncertainty estimation","code":""},{"path":"https://ummel.github.io/fusionModel/reference/recs.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Data from the 2015 Residential Energy Consumption Survey (RECS) — recs","text":"https://www.eia.gov/consumption/residential/data/2015/","code":""},{"path":"https://ummel.github.io/fusionModel/reference/train.html","id":null,"dir":"Reference","previous_headings":"","what":"Train a fusion model — train","title":"Train a fusion model — train","text":"Train fusion model \"donor\" data using sequential LightGBM models model conditional distributions. resulting fusion model (.fsn file) can used fuse simulate outcomes \"recipient\" dataset.","code":""},{"path":"https://ummel.github.io/fusionModel/reference/train.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train a fusion model — train","text":"","code":"train(   data,   y,   x,   fsn = \"fusion_model.fsn\",   weight = NULL,   nfolds = 5,   nquantiles = 3,   nclusters = 2000,   krange = c(10, 500),   hyper = NULL,   fork = FALSE,   cores = 1 )"},{"path":"https://ummel.github.io/fusionModel/reference/train.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train a fusion model — train","text":"data Data frame. Donor dataset. Categorical variables must factors ordered whenever possible. y Character list. Variables data eventually fuse recipient dataset. Variables fused order provided. y list, entry character vector possibly indicating multiple variables fuse block. x Character list. Predictor variables data common donor eventual recipient. list, slot specifies x predictors use y. fsn Character. File path fusion model saved. Must use .fsn suffix. weight Character. Name observation weights column data. NULL (default), uniform weights assumed. nfolds Numeric. Number cross-validation folds used LightGBM model training. , nfolds < 1, fraction observations use training set; remainder used validation (faster cross-validation). nquantiles Numeric. Number quantile models train continuous y variables (along conditional mean). nquantiles evenly-distributed percentiles used. default nquantiles = 3 usually sufficient yields quantile models 16.6th, 50th, 83.3rd percentiles. nclusters Numeric. Maximum number k-means clusters use. Higher better computational cost. nclusters = 0 nclusters = Inf turn clustering. krange Numeric. Minimum maximum number nearest neighbors use construction continuous conditional distributions. Higher max(krange) better computational cost. hyper List. LightGBM hyperparameters used model training. NULL, default values used. See Details Examples. fork Logical. parallel processing via forking used, possible? See Details. cores Integer. Number physical CPU cores used parallel computation. fork = FALSE Windows platform (since forking possible), fusion variables/blocks processed serially LightGBM uses cores internal multithreading via OpenMP. Unix system, fork = TRUE, cores > 1, cores <= length(y) fusion variables/blocks processed parallel via mclapply.","code":""},{"path":"https://ummel.github.io/fusionModel/reference/train.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train a fusion model — train","text":"fusion model object (.fsn) saved fsn.","code":""},{"path":"https://ummel.github.io/fusionModel/reference/train.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Train a fusion model — train","text":"y list, slot indicates either single variable , alternatively, multiple variables fuse block. Variables within block sampled jointly original donor data fusion. See Examples. y variables exhibit variance continuous y variables less 10 * nfolds non-zero observations (minimum required cross-validation) automatically removed warning. fusion model written fsn zipped archive created zip containing models data required fuse. hyper argument can used specify LightGBM hyperparameter values perform \"grid search\" model training. See full list parameters. combination hyperparameters, nfolds cross-validation performed using lgb.cv early stopping condition. parameter combination lowest loss function value used fit final model via lgb.train. candidate parameter values specified hyper, longer processing time. hyper = NULL, single set parameters used LightGBM default values. Typically, users reason specify following parameters via hyper: boosting num_leaves bagging_fraction feature_fraction max_depth min_data_in_leaf num_iterations learning_rate max_bin min_data_in_bin max_cat_threshold Testing small--medium size datasets suggests forking typically faster OpenMP multithreading (default). However, forking sometimes \"hang\" (continue run CPU usage error message) OpenMP process previously used session. issue appears related Intel's OpenMP implementation (see ). can triggered operations called train() use data.table fst multithread mode. experience hanged forking, try calling data.table::setDTthreads(1) fst::threads_fst(1) immediately library(fusionModel) new session.","code":""},{"path":"https://ummel.github.io/fusionModel/reference/train.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train a fusion model — train","text":"","code":"# Build a fusion model using RECS microdata # Note that \"fusion_model.fsn\" will be written to working directory ?recs fusion.vars <- c(\"electricity\", \"natural_gas\", \"aircon\") predictor.vars <- names(recs)[2:12] fsn.path <- train(data = recs, y = fusion.vars, x = predictor.vars) #> 3 fusion variables #> 11 initial predictor variables #> 5686 observations #> Using all available predictors for each fusion variable #> -- Training step 1 of 3: electricity #>   -- R-squared of cluster means: 0.973  #>   -- Number of neighbors in each cluster: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>    10.0    69.0   150.5   195.0   305.0   499.0  #> -- Training step 2 of 3: natural_gas #>   -- R-squared of cluster means: 0.975  #>   -- Number of neighbors in each cluster: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>    10.0    66.0   143.5   188.5   301.0   498.0  #> -- Training step 3 of 3: aircon #> Fusion model saved to: #>  /home/runner/work/fusionModel/fusionModel/docs/reference/fusion_model.fsn  #> Total processing time: 7.25 secs   # When 'y' is a list, it can specify variables to fuse as a block fusion.vars <- list(\"electricity\", \"natural_gas\", c(\"heating_share\", \"cooling_share\", \"other_share\")) fusion.vars #> [[1]] #> [1] \"electricity\" #>  #> [[2]] #> [1] \"natural_gas\" #>  #> [[3]] #> [1] \"heating_share\" \"cooling_share\" \"other_share\"   #>  train(data = recs, y = fusion.vars, x = predictor.vars) #> 5 fusion variables #> 11 initial predictor variables #> 5686 observations #> Using all available predictors for each fusion variable #> -- Training step 1 of 3: electricity #>   -- R-squared of cluster means: 0.976  #>   -- Number of neighbors in each cluster: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>    10.0    70.0   156.0   201.1   319.0   499.0  #> -- Training step 2 of 3: natural_gas #>   -- R-squared of cluster means: 0.973  #>   -- Number of neighbors in each cluster: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>    10.0    66.0   145.0   187.2   282.5   498.0  #> -- Training step 3 of 3: heating_share, cooling_share, other_share #> Fusion model saved to: #>  /home/runner/work/fusionModel/fusionModel/docs/reference/fusion_model.fsn  #> Total processing time: 16.8 secs   # When 'x' is a list, it specifies which predictor variables to use for each 'y' xlist <- list(predictor.vars[1:4], predictor.vars[2:8], predictor.vars) xlist #> [[1]] #> [1] \"income\"    \"age\"       \"race\"      \"education\" #>  #> [[2]] #> [1] \"age\"         \"race\"        \"education\"   \"employment\"  \"hh_size\"     #> [6] \"division\"    \"urban_rural\" #>  #> [[3]] #>  [1] \"income\"      \"age\"         \"race\"        \"education\"   \"employment\"  #>  [6] \"hh_size\"     \"division\"    \"urban_rural\" \"climate\"     \"renter\"      #> [11] \"home_type\"   #>  train(data = recs, y = fusion.vars, x = xlist) #> 5 fusion variables #> 11 initial predictor variables #> 5686 observations #> Using specified set of predictors for each fusion variable #> -- Training step 1 of 3: electricity #>   -- R-squared of cluster means: 0.936  #>   -- Number of neighbors in each cluster: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>    10.0    86.0   194.0   225.2   373.0   498.0  #> -- Training step 2 of 3: natural_gas #>   -- R-squared of cluster means: 0.964  #>   -- Number of neighbors in each cluster: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   10.00   64.75  173.00  218.04  379.25  499.00  #> -- Training step 3 of 3: heating_share, cooling_share, other_share #> Fusion model saved to: #>  /home/runner/work/fusionModel/fusionModel/docs/reference/fusion_model.fsn  #> Total processing time: 14.4 secs   # Specify a single set of LightGBM hyperparameters train(data = recs, y = fusion.vars, x = predictor.vars,       hyper = list(boosting = \"goss\",                    feature_fraction = 0.8,                    num_iterations = 300       )) #> 5 fusion variables #> 11 initial predictor variables #> 5686 observations #> Using all available predictors for each fusion variable #> -- Training step 1 of 3: electricity #>   -- R-squared of cluster means: 0.968  #>   -- Number of neighbors in each cluster: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>    10.0    68.0   154.0   195.3   306.0   499.0  #> -- Training step 2 of 3: natural_gas #>   -- R-squared of cluster means: 0.962  #>   -- Number of neighbors in each cluster: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>    10.0    61.0   150.0   190.8   294.2   498.0  #> -- Training step 3 of 3: heating_share, cooling_share, other_share #> Fusion model saved to: #>  /home/runner/work/fusionModel/fusionModel/docs/reference/fusion_model.fsn  #> Total processing time: 18.8 secs   # Specify a range of LightGBM hyperparameters to search over # This takes longer, because there are more models to test train(data = recs, y = fusion.vars, x = predictor.vars,       hyper = list(num_leaves = c(10, 30),                    feature_fraction = c(0.7, 0.9),                    num_iterations = 50       )) #> 5 fusion variables #> 11 initial predictor variables #> 5686 observations #> Using all available predictors for each fusion variable #> -- Training step 1 of 3: electricity #>   -- R-squared of cluster means: 0.971  #>   -- Number of neighbors in each cluster: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>    10.0    85.0   178.5   210.9   328.0   499.0  #> -- Training step 2 of 3: natural_gas #>   -- R-squared of cluster means: 0.984  #>   -- Number of neighbors in each cluster: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>    10.0    62.0   139.5   180.6   277.2   498.0  #> -- Training step 3 of 3: heating_share, cooling_share, other_share #> Fusion model saved to: #>  /home/runner/work/fusionModel/fusionModel/docs/reference/fusion_model.fsn  #> Total processing time: 37.8 secs"},{"path":"https://ummel.github.io/fusionModel/reference/validate.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate fusion output — validate","title":"Validate fusion output — validate","text":"Performs internal validation analyses fused microdata estimate well simulated variables reflect patterns dataset used train underlying fusion model (.e. observed/donor data). provides standard approach validating fusion output associated models. See Examples recommended usage.","code":""},{"path":"https://ummel.github.io/fusionModel/reference/validate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate fusion output — validate","text":"","code":"validate(   observed,   implicates,   subset_vars,   weight = NULL,   min_size = 30,   plot = TRUE,   cores = 1 )"},{"path":"https://ummel.github.io/fusionModel/reference/validate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate fusion output — validate","text":"observed Data frame. Observed data validate simulated variables. Typically dataset used train fusion model used generate simulated. implicates Data frame. Implicates synthetic (fused) variables. Typically generated fuse. implicates row-stacked identified integer column \"M\". subset_vars Character. Vector columns observed used define population subsets across fusion variables validated. levels subset_vars (including two-way interactions subset_vars) define population subsets. Continuous subset_vars converted five-level ordered factor based univariate k-means clustering. weight Character. Name observation weights column observed. NULL (default), uniform weights assumed. min_size Integer. Subsets less min_size observations excluded. Since subsets observations unlikely give reliable estimates, make sense consider validation purposes. plot Logical. TRUE (default), plot_valid called internally summary plots returned along complete validation results. Requires ggplot2 package. cores Integer. Number cores used. applicable Unix systems.","code":""},{"path":"https://ummel.github.io/fusionModel/reference/validate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate fusion output — validate","text":"plot = FALSE, data frame containing complete validation results. plot = FALSE, list containing full results well additional lot objects described plot_valid.","code":""},{"path":"https://ummel.github.io/fusionModel/reference/validate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate fusion output — validate","text":"objective validate confirm fusion output sensible help establish utility synthetic data across myriad analyses. Utility based comparison point estimates confidence intervals derived using multiple-implicate synthetic data derived using original donor data. specific analyses tested include variable levels (means proportions) across population subsets varying size. allows estimates synthetic variables perform analyses real-world relevance, varying levels complexity. effect, validate() performs large number analyses kind analyze function designed one--one basis. users want use default setting plot = TRUE simultaneously return visualization (plots) validation results. Plot creation detailed plot_valid.","code":""},{"path":"https://ummel.github.io/fusionModel/reference/validate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate fusion output — validate","text":"","code":"# Build a fusion model using RECS microdata # Note that \"fusion_model.fsn\" will be written to working directory fusion.vars <- c(\"electricity\", \"natural_gas\", \"aircon\") predictor.vars <- names(recs)[2:12] fsn.path <- train(data = recs,                   y = fusion.vars,                   x = predictor.vars,                   weight = \"weight\") #> 3 fusion variables #> 11 initial predictor variables #> 5686 observations #> Using all available predictors for each fusion variable #> -- Training step 1 of 3: electricity #>   -- R-squared of cluster means: 0.971  #>   -- Number of neighbors in each cluster: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   10.00   87.75  181.00  216.53  343.00  498.00  #> -- Training step 2 of 3: natural_gas #>   -- R-squared of cluster means: 0.977  #>   -- Number of neighbors in each cluster: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>    10.0    60.0   141.0   197.7   345.0   499.0  #> -- Training step 3 of 3: aircon #> Fusion model saved to: #>  /home/runner/work/fusionModel/fusionModel/docs/reference/fusion_model.fsn  #> Total processing time: 7.47 secs   # Fuse back onto the donor data (multiple implicates) sim <- fuse(data = recs,             fsn = fsn.path,             M = 40) #> 3 fusion variables #> 11 initial predictor variables #> 5686 observations #> Generating 40 implicates  #> Fusion step 1 of 3: electricity #> -- Predicting LightGBM models #> -- Simulating fused values #> Fusion step 2 of 3: natural_gas #> -- Predicting LightGBM models #> -- Simulating fused values #> Fusion step 3 of 3: aircon #> -- Predicting LightGBM models #> -- Simulating fused values #> Total processing time: 11.9 secs   # Calculate validation results valid <- validate(observed = recs,                   implicates = sim,                   subset_vars = c(\"income\", \"education\", \"race\", \"urban_rural\"),                   weight = \"weight\") #> One-hot encoding categorical fusion variables #> Correlation between observed and fused values: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   0.047   0.213   0.244   0.281   0.404   0.489  #> Processing validation analyses for 3 fusion variables #> Performed 642 analyses across 107 subsets #> Smoothing validation metrics #> Average smoothed performance metrics across subset range: #>              y     est    vad   moe #> 1       aircon  0.0254  0.743  1.36 #> 2  electricity  0.0172  0.684  1.15 #> 3  natural_gas  0.0239  0.852  1.17 #> Creating ggplot2 graphics   #> Total processing time: 3.37 secs"}]
